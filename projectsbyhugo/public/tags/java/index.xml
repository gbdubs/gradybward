<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Grady Berry Ward</title>
    <link>http://gradybward.com/tags/java/</link>
    <description>Recent content in Java on Grady Berry Ward</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://gradybward.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://gradybward.com/project/3_sat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gradybward.com/project/3_sat/</guid>
      <description>Haven’t you ever looked at SAT (the problem of finding a solution to an arbitrary expression of boolean predicates), and, realizing it can be reduced to 3-SAT, thought it must be solvable in sub-polynomial time? My intuition says so too, but this is clearly a function of naievite.
The thing that struck me about SAT generally is that it is fundamentally trying to explore a bunch of different roads at once, and reporting back the ones that don’t hit dead ends.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://gradybward.com/project/bananagrams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gradybward.com/project/bananagrams/</guid>
      <description>In 2016, I had just started at Google, and had started having breakfast every day with the same group of folks - Chris, Brett, Andrew and Brandon. All of us being nerds, techno-optimists and deeply competitive, at one point Brandon described having a competition amongst us to see who could write the best AI to play the game bananagrams.
My productivity dipped precipitously over the next few days as I considered how to crush my good friends.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://gradybward.com/project/cindi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gradybward.com/project/cindi/</guid>
      <description>If you haven’t yet listened to Janelle Monae’s “Metropolis” suite, drop all the committments you can, pour yourself some coffee and wine, and listen to it straight through.
Monae is a magician, a siren, an entertainer, a theorist, a historian, and a visionary. Metropolis helped me understand so much about so much that talking about it here will certainly do it an injustice. If you are interested, check out my 2016 term paper on her work within the context of historical waves of Black Feminism.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://gradybward.com/project/draw_me_css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gradybward.com/project/draw_me_css/</guid>
      <description>In the third Harry Potter book, Harry is given the “Maurauder’s Map”, and one of the many images I like about this map is how the ink spreads outward from the point that it is awoken.
I wondered if you could do this in CSS, so I poked around, learned about CSS Transitions, and came up with a generalized framework for making a set of boxes animate on to the page.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://gradybward.com/project/flux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gradybward.com/project/flux/</guid>
      <description>I saw this blog post by an extremely talented programmer, and was suprised (as he was) to find that there was a natural symmetry to the patterns he was describing. However, in digging into his code, I found that it was not actually symmetrical, but he had just made a very understandable typo which introduced this artificial symmetry.
Working with these equations, I found that the surfaces generated by them were gorgeous, and that the surface appeared to be differentiable with respect to every one of the input paramters.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://gradybward.com/project/hard_scrabble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gradybward.com/project/hard_scrabble/</guid>
      <description>Pair programming is a stellar way for people to learn, particularly when paired with a partner at the same level. I saw this multiple times in action in my time as a teaching assistant for courses at Brandeis. However, the problem of assigning pairs is fundamentally challenging - if the students are given free reign, they will likely pick their friends, and the skill level of the two will be (largely) uncorrelated.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://gradybward.com/project/trees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gradybward.com/project/trees/</guid>
      <description>Recursively enumerating all possible sparse binary trees is easy. Far harder is coming up with a stable mapping between the integers and this set of trees. I was able to do this after a lot of thought.
The code is here, but it is from like four years ago, so please be warned.</description>
    </item>
    
  </channel>
</rss>